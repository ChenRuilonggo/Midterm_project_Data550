# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Read the dataset (assuming it's a comma-separated file without an extension)
nba_data <- read.table("data/nba_2025-03-07", sep = ",", header = TRUE)
# Read the dataset (assuming it's a comma-separated file without an extension)
nba_data <- read.csv("data/nba_2025-03-07", sep = ",", header = TRUE)
View(nba_data)
View(nba_data)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Read the dataset (assuming it's a comma-separated file without an extension)
nba_data <- read.table(here("data", "nba_2025-03-07"), sep = ",", header = TRUE, quote = "\"", fill = TRUE)
# Exclude players with zero minutes played
nba_data <- nba_data %>% filter(mins_played > 0)
# Read the dataset (assuming it's a comma-separated file without an extension)
nba_data <- read.table(here("data", "nba_2025-03-07"), sep = ",", header = TRUE, quote = "\"", fill = TRUE)
# ======================== Overall Performance (Ruilong Chen) ========================
# Calculate Points Per 36 Minutes (pts is already per 36 minutes)
nba_data <- nba_data %>%
mutate(PP36 = pts)
# Exclude players with zero minutes played
nba_data <- nba_data %>% filter(MP > 0)
nba_data <- nba_data %>%
mutate(PP36 = pts)
nba_data <- nba_data %>%
mutate(PP36 = PTS)
# Top 10 players by PP36
top_players <- nba_data %>%
arrange(desc(PP36)) %>%
select(player, position, team, PP36) %>%
head(10)
top_players <- nba_data %>%
arrange(desc(PP36)) %>%
select(Player, Pos, Team, PP36) %>%
head(10)
View(nba_data)
# Print top 10 players based on PP36
print(top_players)
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Read the dataset (assuming it's a comma-separated file without an extension)
nba_data <- read.table(here("data", "nba_2025-03-07"), sep = ",", header = TRUE, quote = "\"", fill = TRUE)
# Exclude players with zero minutes played
nba_data <- nba_data %>% filter(MP > 0)
# ======================== Overall Performance (Ruilong Chen) ========================
# Calculate Points Per 36 Minutes (pts is already per 36 minutes)
nba_data <- nba_data %>%
mutate(PP36 = PTS)
# Top 10 players by PP36
top_players <- nba_data %>%
arrange(desc(PP36)) %>%
select(Player, Pos, Team, PP36) %>%
head(10)
# Print top 10 players based on PP36
print(top_players)
# Average PP36 by position
position_performance <- nba_data %>%
group_by(Pos) %>%
summarise(Average_PP36 = mean(PP36, na.rm = TRUE)) %>%
arrange(desc(Average_PP36))
# Print average PP36 by position
print(position_performance)
# Visualization of PP36 by position
ggplot(position_performance, aes(x = reorder(Pos, -Average_PP36), y = Average_PP36, fill = Pos)) +
geom_bar(stat = "identity") +
labs(title = "Average Points Per 36 Minutes by Position", x = "Position", y = "PP36") +
theme_minimal()
# Save the results
write.csv(top_players, here("output", "top_players.csv"), row.names = FALSE)
# Save the results
write.csv(top_players, here("output", "top_players.csv"), row.names = FALSE)
write.csv(position_performance, here("output", "position_performance.csv"), row.names = FALSE)
print("Overall player performance analysis completed successfully!")
# Print average PP36 by position
print(position_performance)
install.packages(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
# Load required libraries
library(dplyr)
library(ggplot2)
library(here)
# Read the dataset (assuming it's a comma-separated file without an extension)
nba_data <- read.table(here("data", "nba_2025-03-07"), sep = ",", header = TRUE, quote = "\"", fill = TRUE)
# Exclude players with zero minutes played
nba_data <- nba_data %>% filter(MP > 0)
# ======================== Overall Performance (Ruilong Chen) ========================
# Calculate Points Per 36 Minutes (pts is already per 36 minutes)
nba_data <- nba_data %>%
mutate(PP36 = PTS)
# Top 10 players by PP36
top_players <- nba_data %>%
arrange(desc(PP36)) %>%
select(Player, Pos, Team, PP36) %>%
head(10)
# Print top 10 players based on PP36
print(top_players)
# Average PP36 by position
position_performance <- nba_data %>%
group_by(Pos) %>%
summarise(Average_PP36 = mean(PP36, na.rm = TRUE)) %>%
arrange(desc(Average_PP36))
# Print average PP36 by position
print(position_performance)
# Visualization of PP36 by position
ggplot(position_performance, aes(x = reorder(Pos, -Average_PP36), y = Average_PP36, fill = Pos)) +
geom_bar(stat = "identity") +
labs(title = "Average Points Per 36 Minutes by Position", x = "Position", y = "PP36") +
theme_minimal()
# Save the results
write.csv(top_players, here("output", "top_players.csv"), row.names = FALSE)
write.csv(position_performance, here("output", "position_performance.csv"), row.names = FALSE)
print("Overall player performance analysis completed successfully!")
# Load necessary libraries
library(dplyr)
library(here)
# Read the data
data <- read.table(here("data", "nba_2025-03-07"), sep = ",", header = TRUE, quote = "\"", fill = TRUE)
# Exclude players with zero minutes played
data <- data %>% filter(MP > 0)
# Select relevant columns and remove missing values
shooting_data <- data %>%
select(Pos,FG., X3P., eFG.) %>%
na.omit()
# Convert to numeric
shooting_data$FG. <- as.numeric(shooting_data$FG.)
shooting_data$X3P. <- as.numeric(shooting_data$X3P.)
shooting_data$eFG. <- as.numeric(shooting_data$eFG.)
# Summary statistics by position
summary_stats <- shooting_data %>%
group_by(Pos) %>%
summarise(
FG_Mean = mean(FG., na.rm = TRUE),
FG_SD = sd(FG., na.rm = TRUE),
ThreeP_Mean = mean(X3P., na.rm = TRUE),
ThreeP_SD = sd(X3P., na.rm = TRUE),
eFG_Mean = mean(eFG., na.rm = TRUE),
eFG_SD = sd(eFG., na.rm = TRUE),
Count = n()
)
#save table
write.csv(summary_stats, "output/shooting efficiency.csv", row.names = FALSE)
# Plot Field Goal Percentage by Position
ggplot(shooting_data, aes(x = Pos, y = FG.)) +
geom_boxplot() +
labs(title = "Field Goal Percentage by Position", x = "Position", y = "Field Goal Percentage") +
theme_minimal()
ggsave("output/field_goal_percentage.png", width = 8, height = 6)
# Plot Three-Point Percentage by Position
ggplot(shooting_data, aes(x = Pos, y = X3P.)) +
geom_boxplot() +
labs(title = "Three-Point Percentage by Position", x = "Position", y = "Three-Point Percentage") +
theme_minimal()
ggsave("output/three_point_percentage.png", width = 8, height = 6)
# Plot Effective Field Goal Percentage by Position
ggplot(shooting_data, aes(x = Pos, y = eFG.)) +
geom_boxplot() +
labs(title = "Effective Field Goal Percentage by Position", x = "Position", y = "Effective Field Goal Percentage") +
theme_minimal()
ggsave("output/effective_field_goal_percentage.png", width = 8, height = 6)
